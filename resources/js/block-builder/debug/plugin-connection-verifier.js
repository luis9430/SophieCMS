// ===================================================================
// resources/js/block-builder/debug/plugin-connection-verifier.js
// Verificador para asegurar que los plugins se conecten correctamente
// ===================================================================

/**
 * Verificar que todos los plugins est√©n correctamente conectados
 */
export function verifyPluginConnections() {
    console.group('üîç Verificando Conexiones de Plugins');
    
    const results = {
        success: true,
        pluginManager: false,
        variables: false,
        dependencies: {},
        issues: [],
        recommendations: []
    };

    try {
        // 1. Verificar PluginManager
        if (!window.pluginManager) {
            results.issues.push('PluginManager no est√° disponible');
            results.success = false;
        } else {
            results.pluginManager = true;
            console.log('‚úÖ PluginManager disponible');
        }

        // 2. Verificar Variables Plugin (CR√çTICO)
        const variablesPlugin = window.pluginManager?.get('variables');
        if (!variablesPlugin) {
            results.issues.push('Variables plugin no est√° registrado');
            results.success = false;
        } else {
            results.variables = true;
            console.log('‚úÖ Variables plugin conectado');
            
            // Verificar funcionalidad b√°sica
            try {
                const testVariables = variablesPlugin.getAllVariables?.();
                const testKeys = variablesPlugin.getVariableKeys?.();
                
                if (testVariables && testKeys) {
                    console.log(`   üìä Variables disponibles: ${testKeys.length}`);
                } else {
                    results.issues.push('Variables plugin no tiene m√©todos esperados');
                }
            } catch (error) {
                results.issues.push(`Error probando Variables plugin: ${error.message}`);
            }
        }

       
        // 6. Recomendaciones
        if (!results.variables) {
            results.recommendations.push('Verificar que el archivo plugins/variables/index.js existe y es v√°lido');
        }
        

        // 7. Resultado final
        if (results.success) {
            console.log('üéâ Todas las conexiones verificadas exitosamente');
        } else {
            console.log('‚ùå Se encontraron problemas en las conexiones');
            results.issues.forEach(issue => console.log(`   ‚ùå ${issue}`));
        }

        console.groupEnd();
        return results;

    } catch (error) {
        console.error('‚ùå Error durante verificaci√≥n:', error);
        results.success = false;
        results.issues.push(`Error cr√≠tico: ${error.message}`);
        console.groupEnd();
        return results;
    }
}

/**
 * Verificar espec√≠ficamente el plugin Variables
 */
export function verifyVariablesPlugin() {
    console.group('üéØ Verificando Plugin Variables');
    
    try {
        // 1. Verificar existencia
        const plugin = window.pluginManager?.get('variables');
        if (!plugin) {
            console.error('‚ùå Variables plugin no encontrado');
            console.groupEnd();
            return false;
        }

        console.log('‚úÖ Variables plugin encontrado');
        console.log(`   üì¶ Versi√≥n: ${plugin.version || 'N/A'}`);

        // 2. Verificar m√©todos esenciales
        const essentialMethods = [
            'getAllVariables',
            'getVariable',
            'getVariableKeys'
        ];

        const missingMethods = essentialMethods.filter(method => 
            typeof plugin[method] !== 'function'
        );

        if (missingMethods.length > 0) {
            console.error('‚ùå M√©todos faltantes:', missingMethods);
            console.groupEnd();
            return false;
        }

        console.log('‚úÖ Todos los m√©todos esenciales disponibles');

        // 3. Probar funcionalidad
        try {
            const allVars = plugin.getAllVariables();
            const keys = plugin.getVariableKeys();
            
            console.log(`‚úÖ Funcionalidad verificada:`);
            console.log(`   üìä Variables totales: ${keys.length}`);
            console.log(`   üìã Proveedores: ${Object.keys(allVars).length}`);

            // Probar obtener variable espec√≠fica
            if (keys.length > 0) {
                const testKey = keys[0];
                const testValue = plugin.getVariable(testKey);
                console.log(`   üß™ Test variable "${testKey}": ${testValue !== null ? '‚úÖ' : '‚ùå'}`);
            }

        } catch (error) {
            console.error('‚ùå Error probando funcionalidad:', error);
            console.groupEnd();
            return false;
        }

        console.log('üéâ Variables plugin completamente funcional');
        console.groupEnd();
        return true;

    } catch (error) {
        console.error('‚ùå Error verificando Variables plugin:', error);
        console.groupEnd();
        return false;
    }
}

/**
 * Auto-fix para conexiones de plugins
 */
export async function fixPluginConnections() {
    console.group('üîß Reparando Conexiones de Plugins');
    
    try {
        const verification = verifyPluginConnections();
        
        if (verification.success) {
            console.log('‚úÖ No se necesitan reparaciones');
            console.groupEnd();
            return true;
        }

        console.log('üîß Aplicando reparaciones...');

        // 1. Si falta Variables, intentar reconectarlo
        if (!verification.variables) {
            console.log('üîÑ Intentando reconectar Variables plugin...');
            try {
                const variablesModule = await import('../plugins/variables/index.js');
                await window.pluginManager.register('variables', variablesModule.default, { replace: true });
                console.log('‚úÖ Variables plugin reconectado');
            } catch (error) {
                console.error('‚ùå No se pudo reconectar Variables plugin:', error);
                console.groupEnd();
                return false;
            }
        }


        // 3. Verificar resultado
        const finalVerification = verifyPluginConnections();
        
        if (finalVerification.success) {
            console.log('üéâ Reparaciones exitosas');
            console.groupEnd();
            return true;
        } else {
            console.log('‚ùå Algunas reparaciones fallaron');
            console.groupEnd();
            return false;
        }

    } catch (error) {
        console.error('‚ùå Error durante reparaci√≥n:', error);
        console.groupEnd();
        return false;
    }
}

// ===================================================================
// FUNCIONES DE CONVENIENCIA
// ===================================================================

/**
 * Verificaci√≥n r√°pida - solo muestra estado b√°sico
 */


// ===================================================================
// AUTO-EXPORT PARA DEBUGGING
// ===================================================================

if (typeof window !== 'undefined') {
    window.verifyPlugins = quickConnectionCheck;
    window.pluginConnectionTools = {
        verify: verifyPluginConnections,
        verifyVariables: verifyVariablesPlugin,
        fix: fixPluginConnections,
        quick: quickConnectionCheck
    };

    console.log('üîß Plugin Connection Tools loaded');
    console.log('üí° Use: verifyPlugins() para verificaci√≥n r√°pida');
}

export default {
    verifyPluginConnections,
    verifyVariablesPlugin,
    fixPluginConnections,
    quickConnectionCheck
};